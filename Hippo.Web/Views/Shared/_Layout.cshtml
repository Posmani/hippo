@using Microsoft.Extensions.Configuration
@using Hippo.Core.Services
@inject IConfiguration Configuration
@inject IUserService UserService
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HiPPO</title>

    <environment exclude="Development">
        @* In a production deployment, we will use a dynamic view component to load the generated styles *@
        <cache expires-after="@TimeSpan.FromMinutes(30)">
            @await Component.InvokeAsync("DynamicStyles")
        </cache>
    </environment>

    @RenderSection("Styles", required: false)
</head>

<body>
    <div class="page-wrap">
        <header>
        </header>
        
        @* Main Content Area for non-react routes *@
        <main role="main" class="main-content-wrapper container">

            @* Inject React *@
            <div id="root"></div>
            @RenderBody()
        </main>
    </div>


    <footer class="container footer">
        <p>Copyright &copy; <span id="copywrite-year"></span> The Regents of the University of California, Davis campus.
            All rights reserved.</p>
    </footer>


    <script>
        var Hippo = { user: {}};

        Hippo.user.detail = @Html.Raw(Context.GetUserDetails());
        Hippo.antiForgeryToken = "@Xsrf.GetAndStoreTokens(Context).RequestToken";
    </script>

    <environment include="Development">
        @* NOTE: These are auto generated by CRA/ClientApp and will load in our SASS/CSS plus other libraries and will
            fast reload changes.
        *@
        <script src="/static/js/bundle.js"></script>
        <script src="/static/js/vendors~main.chunk.js"></script>
        <script src="/static/js/main.chunk.js"></script>
    </environment>
    <environment exclude="Development">
        @* In a production deployment, we will use a dynamic view component to load the generated scripts *@
        <cache expires-after="@TimeSpan.FromMinutes(30)">
            @await Component.InvokeAsync("DynamicScripts")
        </cache>
    </environment>

    @RenderSection("Scripts", required: false)
</body>

</html>